@startuml
'https://plantuml.com/class-diagram
 class Game
 {

 }

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(FlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}

class BaseProp
{
    + BaseProp(int locationX, int locationY, int speedX, int speedY)
    + forward():void
}

interface PropFactory
{
    +createProp():BaseProp
}

class BloodPropFactory
{
    +createProp():BaseProp
}

class BombPropFactory
{
    +createProp():BaseProp
}

class BulletPropFactory
{
    +createProp():BaseProp
}

AbstractFlyingObject <|-- BaseProp

BaseProp <|-- BloodProp
BaseProp <|-- BombProp
BaseProp <|-- BulletProp

BaseProp <.up. Game
PropFactory <.up. Game

BloodProp <.up. BloodPropFactory
BombProp <.up. BombPropFactory
BulletProp <.up. BulletPropFactory

PropFactory <|.. BloodPropFactory
PropFactory <|.. BombPropFactory
PropFactory <|.. BulletPropFactory

class BloodProp
{
    - power:int
    + BloodProp(int locationX, int locationY, int speedX, int speedY)
    + getPower():int
}

class BombProp
{
    + BombProp(int locationX, int locationY, int speedX, int speedY, int power)
}

class BulletProp
{
    + BulletProp(int locationX, int locationY, int speedX, int speedY)
}

@enduml